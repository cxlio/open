import { spec } from '../spec/index.js';
import tgz, { untarStream, untar } from './index.js';

const decode = (buffer: Uint8Array) => new TextDecoder().decode(buffer);

export default spec('tgz', it => {
	const blob = (d: string) =>
		fetch(d).then(r => {
			if (!r.body) throw "invalid fetch';";
			return r.body;
		});

	it.should('extract empty file', async a => {
		const tar = await blob(
			`data:application/x-tar;base`,
		);
		const files = await untarStream(tar);
		a.equal(files.length, 0);
	});

	it.should('extract empty buffer', async a => {
		const tar = await fetch(
			`data:application/x-tar;base`,
		).then(r => r.arrayBuffer());
		const files = await untar(new Uint8Array(tar));
		a.equal(files.length, 0);
	});

	it.should('load a tgz file with a single file', async a => {
		const tar = await blob(
			`data:application/octet-stream;base64,H4sIAAAAAAAAA+3OQQoCQQxE0aw9RZ9Akk5m+jyNiAiiMBPB46sg4kbExSDCf5taVC0qt3PaOi8py9GbMeKe1gZ9zYcQixbmWttQRc3dRym64Ken85x9KkV2+37c9OlwerP71P8pq7769QcAAAAAAAAAAAAAAAAAwPeuu6dI0wAoAAA=`,
		);
		const files = await tgz(tar);
		a.equal(files.length, 1);
		a.equal(files[0].path, 'test1.txt');
		a.equal(files[0].content.byteLength, 4);
		a.equal(decode(files[0].content), '123\n');
	});

	it.should('load long filenames', async a => {
		const tar = await blob(
			`data:application/octet-stream;base64,H4sIAAAAAAAAA+3U0U6DMBQG4D4KTwAttODuHIKbGcwBE+fuEBQZCKMOYT6928USMeoSE6bT892cizbpSf/2iBLqHN7QMN5WorFW3UGEapQoCmaUIEyIqipIYN23hlD1tAq4IKA4CfIw4Fnxyb5960dKlETp1Cry2ErytKMztgGrlO7yfl+xrLDWW9jmjzf5Wx3107LLnxfF6qt9+9aPlCidyHOm1UVEGiMY9PV5pb5EtZ4PZgUd3K39sIqLkrhmup4afuM2y3T6PPQbPrLNyHG8YFotDKe6WTt8Yrieq/dDV186/Pn8ehGkTol55I5Jzzwb6w+2PXI807Z1K8NWbVzWIWMzT59cJbMLnmaa/1hmt5aGh4tSFlfNX7zuX+cQ+b/5/x/PfyK35/+magwJ+BAX8M/nP+U0mcQ9lt3/dCcAAAAAAAAAAAAAAAAAAAAAAAAA+K5Xc8c/hAAoAAA=`,
		);
		const files = await tgz(tar);
		a.equal(files.length, 1);
		a.equal(files[0].path.length, 156);
		a.equal(
			files[0].path,
			'./82Z57wod1xDaGABZu6zdwBnGXo4GeyVcugoq1REkyTDVxRxpkTvHVxrKMEdQQSaTujDQuYyQrPDRSRBAcRBpQrvFWjakQq0rdRN19ECNBhMMKQSEMMBLl0LwDOwc55XSBPUiXIrkl7VmqlbL70Hjq2.txt',
		);
		a.equal(files[0].content.byteLength, 10);
	});

	it.should(
		'extract all files of a tar.gz archive containing multiple files in the root directory.',
		async a => {
			const tar = await blob(
				`data:application/octet-stream;base64,H4sIAAAAAAAAA+3V3XKiMBQHcB7FJ1A+AlnutmpFLMhXFfGOAoqrgiGJqE9fvXBm3Wm3Mzurbrfnd5OLZIYz+Ydzmi3h6sQjLIqnVcLqxXomSAgjSUFHsiBKkoZFoaFevzRB4JTFVaMhzBdxkcTVqnzn3Ef7n1Sz1Wx9t8pibi2K5ZW+cQpYQ+ic96+rKCvqxVs45S8qQsO6Uj0XzvlXZcl+d+6j/U+q2RqjVZfms86WObEnGopc170MrQdcYWmPMtPaWFJu/Rgl7UNvPGLRxF4Fhh94L0OpP8r056DItmTqBzxKebhf2H1q0Zc04Way51MiaY4W1QObTIhUOYlq80VYzkyKgnLjr7NU65FigY020Xdzx2VT7HolGfh1k+3+x+v+59wi/5/+/7f7vyRf9n9Fxqf+L97iAr54/5ddJbLwmFbFvSsB9wDz/6vP//2Tb6CZsxwWdorLdtiLqZh1dlsqK3vXbOPJhvfbPBtoh36IAt3GubcldGhEue6OZk5Wdybd0TNJZsrYYWuWfnM7Ca0flprpPyUOLilmtUpZVh0QT+ODTJKqJt1M8h/zA/IGesQn87m31fPyYbjsq/5juA/HDOb/bdwi/z+Y/4oK8/8mHPPYawNnqBr3rgQAAAAAAAAAAAAAAAAAAH/LK5tbV70AKAAA`,
			);
			const files = await tgz(tar);
			a.equal(files.length, 2);
			const paths = files.map(f => f.path).sort();
			a.equalValues(paths, [
				'./V4lDshfCvtOaQ0G32wwFe4mJu3tdFstILpL1hLjUcBzFVUtYXMlSGRSQbN1HUe9TSnevqZRSuYduWyiMHsLsbdcuIcyuZq16O6YwJMqXq1rOc5MuiWofIs4SopRmed6Fqni7GBq9xgOPtZ7PQoqJRw.txt',
				'./yKRG4fOkNnMd7oBWFas0eCxvs23yPIB7XpuHBueJ6zHW4S9M7hQvqsNGYh9PUfOewCXDUTqcf3VOtmtd8PCcswAk6IRKcO7os7tw5sterz4udaz2qcrwqDe1REhz4QJ9YuXggQv9hoANkH5REWyWVt.txt',
			]);
			a.equal(files[0].content.byteLength, 10);
			a.equal(files[1].content.byteLength, 10);
		},
	);

	it.should('extract archive with subdirectories', async a => {
		const tar = await blob(
			`data:application/octet-stream;base64,H4sIAAAAAAAAA+3USwrCMBQF0CylK2jfS5MU5+pIqANdQP0XSwv9gMvXCqUoFhH7E++ZZJBAHtzk2o7oHN14ROXKnn5YK4KVp9jVpFwWxGyMKyzd/WhCFFkepJYljmEQb4M0ShrOvdv/UbaTFZtdmMoO38E9f60/yN+VykP+fajzP4TRXtr5JW/9jjJgo1Rz/iyf8tdEUljU+iQv/Hn+c5+TeMX+2gw9CQyh+v88tv436P8+1PmX/c/j6X9C//dhNs0n09NimZ6HngQAAAAAAAAAAAAAAAAAvnUFhFIZFQAoAAA=`,
		);
		const files = await tgz(tar);
		a.equal(files.length, 2);
		const paths = files.map(f => f.path).sort();
		a.equalValues(paths, ['./subdir1/file1.txt', './subdir2/file2.txt']);
		a.equal(files[0].content.byteLength, 10);
		a.equal(files[1].content.byteLength, 10);
	});

	it.should('extract archive with file with 512 bytes', async a => {
		const tar = await blob(
			`data:application/octet-stream;base64,H4sIAAAAAAAAA0sz1CupKGGgKTAAAjMTExBtaG5qgEyDgCEQMxiamJsYGpuaGxkZMhgYGpkZGDEoGNDWWRBQWlySWKSgwJCemZiXnFiUk49DHSH5IQpWasmlOZvO7MuX+mmw6fofvptKdluT4/cliavtu/2p0dWzvvhU7Mazv/evU3Fccl8iz+IC+67gXnd+ucLdQUGF/BweM8+9bD/8Slbi7Ql9IW19ibuLk8LW/7kUuFh5TXBe2YdDIilyn4JqthRs++5zYlX/YZNDOerbauNuPm3rNNhcLnkzyILvprgmi+lf/Ufmia8bF7nf+b2621ax+WfVvZPcWh1ywUcN9xyZsHOyIOvlevFO9XV5VyeaPFq266Cgk9P20hcb4/6ckW1xPdnrcXf51UlnSoMrD0j+jmrKXa0bUylpsn3X60WrPtxq17dkziu5eDZ3YXrl5q8dizrcZRId2awPc76IOhH0uvqgmfCBiodTzTzWRhd0WSne+Gxs6TTpolsfa8nJ/rubM+9fKu+6s+vrLnNjm+7f0Xw6srLTz34/uIJlg1SMXhPb4ohzqqWicfeWLts1qfV5iYnn4ltTF89e+PaCbtrZ42uiKh2/e/knvwu/f2EN03nWWK8Y8exPHN82L5UoXLn0vM+3U4qST+c9LmKJXv7Mc37FHRuvBVaJTHLZEwOKHJfb1PJ7ri902ztlI6NgoK1csuSk2iNX/2dZ//Vt/D1jXwfT8sO5TqbOLVc2Pra6d/yYixGDumUxi9b8iU9L/64O19K0Kz8ckvOzsubgpAPvLQqSJG0K1TxeHHl+/Oh/icz3Qkm3bSSFX12zq3x4NCLNaJDmf+PR/E8P8OiK4v7T+9dPbQ42Klhjd1XM98uqb+5LEkU216fcr2TJtfT6qevy7ePSzHmHhS3XGcyR4np+r8Xt/tvy2tmpPclF+/e/6y95l2qV9PZv8psTnX6vGY4EuH9+uvlRk9OVzRL+nL8Ez8VmiW0Vq5vq1qs31zr11O7Nq3c/+b/0UkVA6XzzT34hWzPEN2t03V0RITozvWblw7X9zy+3vd93xYyJ4++PBTlLPt9cpnT5tueddQpc1huMlp1w2Hjos4mS7B3H+C/eTr2zPk/V3ynuXz9Tar617Y5ZTbveTzwm4W7SqL3wzBXDc989PFSzYs/btW1OcVsfUMrXreSjE1dfk9HyLWyONueG2uMzJ3ld5Npl4uI9/WiZlJdflHvk23X8bS3bD/3YknZd+ce7z8bl/y6c3cjd/Vn6V0FC1xkOFZnvBpppL4vPHlj3rmXfxvJJjGuXL7ENFlHcuDv2hNLZP2zcL/0mSDXUh/Ad15hr2Hp5j8H67g3bF06qj2mZP2Hqr2W3LUtibliKP3/cV2j83Hu3g6p/8U9OzduOJn1uOVJ9XTzvmDbVKORw7w5oO6yZv+BckuThy5ez3y5deXePkOOKhfPZlbv5hAJ9LZ6fPHijIChV1FGVZ16n1FSd01u+vlZ9v8aq8oQgx8z7uznTHe68jpPxzpzpktkZIPzwjPNHx4CrMu8DRNr2h16O3dB4b9bDaybN1U+Ppd0ydRzo9DcKRsEoGAWjYBSMglEwCkbBKBgFo2AUjIJRMApGwSgYBaNgFIyCUTAKRsEoGAWjYBSMAsoBAIp00RYAKAAA`,
		);
		const files = await tgz(tar);
		a.equal(files.length, 2);
		a.equal(files[0].content.byteLength, 512);
	});

	it.should(
		'extract archive with file with 512 bytes using small chunks',
		async a => {
			const chunkSize = 100;
			const transformStream = new TransformStream({
				async transform(chunk, controller) {
					let offset = 0;
					while (offset < chunk.length) {
						const newChunk = chunk.slice(
							offset,
							offset + chunkSize,
						);
						controller.enqueue(newChunk);
						offset += chunkSize;
					}
				},
			});
			const tar = await blob(
				`data:application/octet-stream;base64,H4sIAAAAAAAAA0sz1CupKGGgKTAAAjMTExBtaG5qgEyDgCEQMxiamJsYGpuaGxkZMhgYGpkZGDEoGNDWWRBQWlySWKSgwJCemZiXnFiUk49DHSH5IQpWasmlOZvO7MuX+mmw6fofvptKdluT4/cliavtu/2p0dWzvvhU7Mazv/evU3Fccl8iz+IC+67gXnd+ucLdQUGF/BweM8+9bD/8Slbi7Ql9IW19ibuLk8LW/7kUuFh5TXBe2YdDIilyn4JqthRs++5zYlX/YZNDOerbauNuPm3rNNhcLnkzyILvprgmi+lf/Ufmia8bF7nf+b2621ax+WfVvZPcWh1ywUcN9xyZsHOyIOvlevFO9XV5VyeaPFq266Cgk9P20hcb4/6ckW1xPdnrcXf51UlnSoMrD0j+jmrKXa0bUylpsn3X60WrPtxq17dkziu5eDZ3YXrl5q8dizrcZRId2awPc76IOhH0uvqgmfCBiodTzTzWRhd0WSne+Gxs6TTpolsfa8nJ/rubM+9fKu+6s+vrLnNjm+7f0Xw6srLTz34/uIJlg1SMXhPb4ohzqqWicfeWLts1qfV5iYnn4ltTF89e+PaCbtrZ42uiKh2/e/knvwu/f2EN03nWWK8Y8exPHN82L5UoXLn0vM+3U4qST+c9LmKJXv7Mc37FHRuvBVaJTHLZEwOKHJfb1PJ7ri902ztlI6NgoK1csuSk2iNX/2dZ//Vt/D1jXwfT8sO5TqbOLVc2Pra6d/yYixGDumUxi9b8iU9L/64O19K0Kz8ckvOzsubgpAPvLQqSJG0K1TxeHHl+/Oh/icz3Qkm3bSSFX12zq3x4NCLNaJDmf+PR/E8P8OiK4v7T+9dPbQ42Klhjd1XM98uqb+5LEkU216fcr2TJtfT6qevy7ePSzHmHhS3XGcyR4np+r8Xt/tvy2tmpPclF+/e/6y95l2qV9PZv8psTnX6vGY4EuH9+uvlRk9OVzRL+nL8Ez8VmiW0Vq5vq1qs31zr11O7Nq3c/+b/0UkVA6XzzT34hWzPEN2t03V0RITozvWblw7X9zy+3vd93xYyJ4++PBTlLPt9cpnT5tueddQpc1huMlp1w2Hjos4mS7B3H+C/eTr2zPk/V3ynuXz9Tar617Y5ZTbveTzwm4W7SqL3wzBXDc989PFSzYs/btW1OcVsfUMrXreSjE1dfk9HyLWyONueG2uMzJ3ld5Npl4uI9/WiZlJdflHvk23X8bS3bD/3YknZd+ce7z8bl/y6c3cjd/Vn6V0FC1xkOFZnvBpppL4vPHlj3rmXfxvJJjGuXL7ENFlHcuDv2hNLZP2zcL/0mSDXUh/Ad15hr2Hp5j8H67g3bF06qj2mZP2Hqr2W3LUtibliKP3/cV2j83Hu3g6p/8U9OzduOJn1uOVJ9XTzvmDbVKORw7w5oO6yZv+BckuThy5ez3y5deXePkOOKhfPZlbv5hAJ9LZ6fPHijIChV1FGVZ16n1FSd01u+vlZ9v8aq8oQgx8z7uznTHe68jpPxzpzpktkZIPzwjPNHx4CrMu8DRNr2h16O3dB4b9bDaybN1U+Ppd0ydRzo9DcKRsEoGAWjYBSMglEwCkbBKBgFo2AUjIJRMApGwSgYBaNgFIyCUTAKRsEoGAWjYBSMAsoBAIp00RYAKAAA`,
			);
			const files = await tgz(tar.pipeThrough(transformStream));
			a.equal(files.length, 2);
			a.equal(files[0].content.byteLength, 512);
		},
	);
});
