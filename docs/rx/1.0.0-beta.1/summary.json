{"index":[{"sig":"BehaviorSubject<T> extends Subject<T>","name":"BehaviorSubject","kind":8,"flags":1,"docs":{"content":[{"value":"A variant of Subject that requires an initial value and emits its current value whenever it is subscribed to."},{"tag":"see","value":"be"}]},"href":"index--BehaviorSubject.html","typeKind":33,"type":"extends Subject<T>","children":[{"sig":"constructor(privatecurrentValue: T): BehaviorSubject<T>","name":"constructor","parameters":[{"sig":"currentValue: T","name":"currentValue","kind":10,"flags":8,"href":"index--BehaviorSubject.html#s254","typeKind":3,"type":"T"}],"kind":14,"href":"index--BehaviorSubject.html#s253","typeKind":8,"type":"BehaviorSubject"},{"sig":"currentValue: T","name":"currentValue","kind":10,"flags":8,"href":"index--BehaviorSubject.html#s254","typeKind":3,"type":"T"},{"sig":"next(val: T): void","name":"next","parameters":[{"sig":"val: T","name":"val","kind":9,"href":"#s257","typeKind":3,"type":"T"}],"kind":11,"flags":1,"href":"index--BehaviorSubject.html#s256","typeKind":32,"type":"void"},{"sig":"onSubscribe(subscription: Subscriber<T>): void","name":"onSubscribe","parameters":[{"sig":"subscription: Subscriber<T>","name":"subscription","kind":9,"href":"#s259","typeKind":34,"type":"Subscriber<T>"}],"kind":11,"flags":17,"href":"index--BehaviorSubject.html#s258","typeKind":32,"type":"void"},{"sig":"value(): T","name":"value","kind":12,"flags":1,"href":"index--BehaviorSubject.html#s255","typeKind":3,"type":"T"}]},{"sig":"CancelSignal extends Observable<void>","name":"CancelSignal","kind":8,"flags":1,"docs":{"content":[{"value":"`CancelSignal` is a specialized `Observable` that signals cancellation to its subscribers.\n\n- Subscribers are notified when the signal is triggered via the `next` method.\n- Once triggered, it completes all current and future subscribers immediately.\n- Subscriptions to this signal will only emit once if the signal is already closed."}]},"href":"index--CancelSignal.html","typeKind":33,"type":"extends Observable<void>","children":[{"sig":"closed: boolean = false","name":"closed","kind":10,"flags":1,"href":"index--CancelSignal.html#s231","typeKind":32,"type":"boolean"},{"sig":"constructor(): CancelSignal","name":"constructor","kind":14,"href":"index--CancelSignal.html#s243","typeKind":8,"type":"CancelSignal"},{"sig":"next(): void","name":"next","kind":11,"flags":1,"href":"index--CancelSignal.html#s244","typeKind":32,"type":"void"},{"sig":"observers: Set<{ error: (e: unknown) => void; unsubscribe: () => void; closed: boolean; signal: CancelSignal; next(val: void): void; complete(): void }> = new Set<Subscriber<void>>()","name":"observers","kind":10,"flags":17,"href":"index--CancelSignal.html#s232","typeKind":4,"type":"Set"}]},{"sig":"CombineResult<R extends Observable<unknown>[]> = R extends (infer U)[] ? Observable<Merge<U>> : never","name":"CombineResult","kind":2,"href":"#s60","typeKind":18,"type":"R extends (infer U)[] ? Observable<Merge<U>> : never","resolvedType":"R extends (infer U)[] ? Observable<Merge<U>, &quot;none&quot;> : never"},{"sig":"CompleteFunction = () => void","name":"CompleteFunction","kind":2,"href":"#s29","typeKind":17,"type":{"sig":"() => void","name":"","kind":17,"href":"#s30","typeKind":32,"type":"void"}},{"sig":"EmptyError extends Error","name":"EmptyError","kind":8,"flags":1,"href":"index--EmptyError.html","typeKind":33,"type":"extends Error","children":[{"sig":"message: string = 'No elements in sequence'","name":"message","kind":10,"flags":1,"href":"index--EmptyError.html#s284","typeKind":32,"type":"string"}]},{"sig":"ErrorFunction = (err: ObservableError) => void","name":"ErrorFunction","kind":2,"href":"#s24","typeKind":17,"type":{"sig":"(err: ObservableError) => void","name":"","parameters":[{"sig":"err: ObservableError","name":"err","kind":9,"href":"#s26","typeKind":2,"type":"ObservableError"}],"kind":17,"href":"#s25","typeKind":32,"type":"void"},"resolvedType":{"sig":"(err: unknown) => void","name":"","parameters":[{"sig":"err: unknown","name":"err","kind":9,"href":"#s28","typeKind":43,"type":"unknown"}],"kind":17,"href":"#s27","typeKind":32,"type":"void"}},{"sig":"Merge<T> = T extends Observable<infer U extends U> ? U : never","name":"Merge","kind":2,"href":"#s48","typeKind":18,"type":"T extends Observable<infer U extends U> ? U : never","resolvedType":"T extends Observable<infer U extends U, &quot;none&quot;> ? U : never"},{"sig":"NextFunction<T> = (val: T) => void","name":"NextFunction","kind":2,"href":"#s18","typeKind":17,"type":{"sig":"(val: T) => void","name":"","parameters":[{"sig":"val: T","name":"val","kind":9,"href":"#s21","typeKind":3,"type":"T"}],"kind":17,"href":"#s20","typeKind":32,"type":"void"}},{"sig":"NextObserver<T> = NextFunction<T> | Observer<T> | undefined","name":"NextObserver","kind":2,"href":"#s83","typeKind":5,"type":{"sig":"","name":"","kind":5,"children":[{"sig":"NextFunction<T>: NextFunction","name":"NextFunction","kind":6,"href":"#s18","typeKind":2,"type":"NextFunction"},{"sig":"Observer<T>: Observer<T>","name":"Observer","kind":6,"href":"index--Observer.html","typeKind":4,"type":"Observer<T>"},{"sig":"undefined","name":"undefined","kind":32}]},"resolvedType":{"sig":"","name":"","kind":5,"children":[{"sig":"NextFunction<T>","name":"NextFunction","kind":6},{"sig":"Observer<T>","name":"Observer","kind":6},{"sig":"undefined","name":"undefined","kind":32}]}},{"sig":"Observable<T, P>","name":"Observable","kind":8,"flags":1,"docs":{"content":[{"value":"A representation of any set of values over any amount of time."}]},"href":"index--Observable.html","children":[{"sig":"___subscribe: SubscribeFunction<T>","name":"___subscribe","kind":10,"flags":16,"href":"index--Observable.html#s157","typeKind":2,"type":"SubscribeFunction"},{"sig":"catchError<T2 extends T | never>(selector: (err: unknown, source: Observable<T>) => Observable<T2> | void): Observable<T>","name":"catchError","parameters":[{"sig":"selector: (err: unknown, source: Observable<T>) => Observable<T2> | void","name":"selector","kind":9,"href":"#s559","typeKind":17,"type":"(err: unknown, source: Observable<T>) => Observable<T2> | void"}],"kind":11,"flags":1,"href":"index--Observable.html#s557","typeKind":8,"type":"Observable"},{"sig":"constructor(protected ___subscribe: SubscribeFunction<T>): Observable<T, P>","name":"constructor","parameters":[{"sig":"___subscribe: SubscribeFunction<T>","name":"___subscribe","kind":10,"flags":16,"href":"index--Observable.html#s157","typeKind":2,"type":"SubscribeFunction"}],"kind":14,"href":"index--Observable.html#s156","typeKind":8,"type":"Observable"},{"sig":"debounceTime(time?: number, timer?: (delay: number) => Observable<void>): Observable<T>","name":"debounceTime","parameters":[{"sig":"time?: number","name":"time","kind":9,"flags":524288,"href":"#s564","typeKind":32,"type":"number"},{"sig":"timer?: (delay: number) => Observable<void>","name":"timer","kind":9,"flags":524288,"href":"#s565","typeKind":17,"type":"(delay: number) => Observable<void>"}],"kind":11,"flags":1,"href":"index--Observable.html#s563","typeKind":8,"type":"Observable"},{"sig":"distinctUntilChanged(): Observable<T>","name":"distinctUntilChanged","kind":11,"flags":1,"href":"index--Observable.html#s568","typeKind":8,"type":"Observable"},{"sig":"exhaustMap<T2>(project: (value: T) => Observable<T2>): Observable<T2>","name":"exhaustMap","parameters":[{"sig":"project: (value: T) => Observable<T2>","name":"project","kind":9,"href":"#s571","typeKind":17,"type":"(value: T) => Observable<T2>"}],"kind":11,"flags":1,"href":"index--Observable.html#s569","typeKind":8,"type":"Observable"},{"sig":"filter<T2>(fn: (val: T) => boolean): Observable<T2>","name":"filter","parameters":[{"sig":"fn: (val: T) => boolean","name":"fn","kind":9,"href":"#s576","typeKind":17,"type":"(val: T) => boolean"}],"kind":11,"flags":1,"href":"index--Observable.html#s574","typeKind":8,"type":"Observable"},{"sig":"finalize(fn: () => void): Observable<T>","name":"finalize","parameters":[{"sig":"fn: () => void","name":"fn","kind":9,"href":"#s580","typeKind":17,"type":"() => void"}],"kind":11,"flags":1,"href":"index--Observable.html#s579","typeKind":8,"type":"Observable"},{"sig":"first(): Observable<T>","name":"first","kind":11,"flags":1,"href":"index--Observable.html#s582","typeKind":8,"type":"Observable"},{"sig":"ignoreElements(): Observable<never>","name":"ignoreElements","kind":11,"flags":1,"href":"index--Observable.html#s618","typeKind":8,"type":"Observable"},{"sig":"map<T2>(mapFn: (val: T) => T2): Observable<T2>","name":"map","parameters":[{"sig":"mapFn: (val: T) => T2","name":"mapFn","kind":9,"href":"#s585","typeKind":17,"type":"(val: T) => T2"}],"kind":11,"flags":1,"href":"index--Observable.html#s583","typeKind":8,"type":"Observable"},{"sig":"mergeMap<T2>(project: (val: T) => Observable<T2>): Observable<T2>","name":"mergeMap","parameters":[{"sig":"project: (val: T) => Observable<T2>","name":"project","kind":9,"href":"#s590","typeKind":17,"type":"(val: T) => Observable<T2>"}],"kind":11,"flags":1,"href":"index--Observable.html#s588","typeKind":8,"type":"Observable"},{"sig":"pipe<A>(a: Operator<T, A>): Observable<A>","name":"pipe","parameters":[{"sig":"a: Operator<T, A>","name":"a","kind":9,"href":"#s169","typeKind":2,"type":"Operator<T, A>"}],"kind":11,"flags":16385,"href":"index--Observable.html#s167","typeKind":8,"type":"Observable"},{"sig":"pipe<A, B>(a: Operator<T, A>, b: Operator<A, B>): Observable<B>","name":"pipe","parameters":[{"sig":"a: Operator<T, A>","name":"a","kind":9,"href":"#s173","typeKind":2,"type":"Operator<T, A>"},{"sig":"b: Operator<A, B>","name":"b","kind":9,"href":"#s174","typeKind":2,"type":"Operator<A, B>"}],"kind":11,"flags":16385,"href":"index--Observable.html#s170","typeKind":8,"type":"Observable"},{"sig":"pipe<A, B, C>(a: Operator<T, A>, b: Operator<A, B>, c: Operator<B, C>): Observable<C>","name":"pipe","parameters":[{"sig":"a: Operator<T, A>","name":"a","kind":9,"href":"#s179","typeKind":2,"type":"Operator<T, A>"},{"sig":"b: Operator<A, B>","name":"b","kind":9,"href":"#s180","typeKind":2,"type":"Operator<A, B>"},{"sig":"c: Operator<B, C>","name":"c","kind":9,"href":"#s181","typeKind":2,"type":"Operator<B, C>"}],"kind":11,"flags":16385,"href":"index--Observable.html#s175","typeKind":8,"type":"Observable"},{"sig":"pipe<A, B, C, D>(a: Operator<T, A>, b: Operator<A, B>, c: Operator<B, C>, d: Operator<C, D>): Observable<D>","name":"pipe","parameters":[{"sig":"a: Operator<T, A>","name":"a","kind":9,"href":"#s187","typeKind":2,"type":"Operator<T, A>"},{"sig":"b: Operator<A, B>","name":"b","kind":9,"href":"#s188","typeKind":2,"type":"Operator<A, B>"},{"sig":"c: Operator<B, C>","name":"c","kind":9,"href":"#s189","typeKind":2,"type":"Operator<B, C>"},{"sig":"d: Operator<C, D>","name":"d","kind":9,"href":"#s190","typeKind":2,"type":"Operator<C, D>"}],"kind":11,"flags":16385,"href":"index--Observable.html#s182","typeKind":8,"type":"Observable"},{"sig":"pipe<A, B, C, D, E>(a: Operator<T, A>, b: Operator<A, B>, c: Operator<B, C>, d: Operator<C, D>, e: Operator<D, E>): Observable<E>","name":"pipe","parameters":[{"sig":"a: Operator<T, A>","name":"a","kind":9,"href":"#s197","typeKind":2,"type":"Operator<T, A>"},{"sig":"b: Operator<A, B>","name":"b","kind":9,"href":"#s198","typeKind":2,"type":"Operator<A, B>"},{"sig":"c: Operator<B, C>","name":"c","kind":9,"href":"#s199","typeKind":2,"type":"Operator<B, C>"},{"sig":"d: Operator<C, D>","name":"d","kind":9,"href":"#s200","typeKind":2,"type":"Operator<C, D>"},{"sig":"e: Operator<D, E>","name":"e","kind":9,"href":"#s201","typeKind":2,"type":"Operator<D, E>"}],"kind":11,"flags":16385,"href":"index--Observable.html#s191","typeKind":8,"type":"Observable"},{"sig":"pipe(...extra: [Operator<T, unknown>, ...Operator<unknown, unknown>[]]): Observable<unknown>","name":"pipe","parameters":[{"sig":"extra: [Operator<T, unknown>, ...Operator<unknown, unknown>[]]","name":"extra","kind":9,"flags":262144,"href":"#s203","typeKind":29,"type":"[Operator<T, unknown>, ...Operator<unknown, unknown>[]]"}],"kind":11,"flags":1,"docs":{"content":[{"value":"Used to stitch together functional operators into a chain."}]},"href":"index--Observable.html#s202","typeKind":8,"type":"Observable"},{"sig":"publishLast(): Observable<T>","name":"publishLast","kind":11,"flags":1,"href":"index--Observable.html#s593","typeKind":8,"type":"Observable"},{"sig":"reduce<T2>(reduceFn: (acc: T2, val: T, i: number) => T2, seed: T2): Observable<T2>","name":"reduce","parameters":[{"sig":"reduceFn: (acc: T2, val: T, i: number) => T2","name":"reduceFn","kind":9,"href":"#s596","typeKind":17,"type":"(acc: T2, val: T, i: number) => T2"},{"sig":"seed: T2","name":"seed","kind":9,"href":"#s601","typeKind":3,"type":"T2"}],"kind":11,"flags":1,"href":"index--Observable.html#s594","typeKind":8,"type":"Observable"},{"sig":"share(): Observable<T>","name":"share","kind":11,"flags":1,"href":"index--Observable.html#s602","typeKind":8,"type":"Observable"},{"sig":"subscribe(next?: NextObserver<T>): Subscription","name":"subscribe","parameters":[{"sig":"next?: NextObserver<T>","name":"next","kind":9,"flags":524288,"href":"#s205","typeKind":2,"type":"NextObserver<T>"}],"kind":11,"flags":1,"docs":{"content":[{"value":"Invokes an execution of an Observable and registers Observer handlers for notifications it will emit."}]},"href":"index--Observable.html#s204","typeKind":4,"type":"Subscription"},{"sig":"switchMap<T2>(project: (val: T) => Observable<T2>): Observable<T2>","name":"switchMap","parameters":[{"sig":"project: (val: T) => Observable<T2>","name":"project","kind":9,"href":"#s605","typeKind":17,"type":"(val: T) => Observable<T2>"}],"kind":11,"flags":1,"href":"index--Observable.html#s603","typeKind":8,"type":"Observable"},{"sig":"take(howMany: number): Observable<T>","name":"take","parameters":[{"sig":"howMany: number","name":"howMany","kind":9,"href":"#s609","typeKind":32,"type":"number"}],"kind":11,"flags":1,"href":"index--Observable.html#s608","typeKind":8,"type":"Observable"},{"sig":"takeWhile(fn: (val: T) => boolean): Observable<T>","name":"takeWhile","parameters":[{"sig":"fn: (val: T) => boolean","name":"fn","kind":9,"href":"#s611","typeKind":17,"type":"(val: T) => boolean"}],"kind":11,"flags":1,"href":"index--Observable.html#s610","typeKind":8,"type":"Observable"},{"sig":"tap(tapFn: (val: T) => void): Observable<T>","name":"tap","parameters":[{"sig":"tapFn: (val: T) => void","name":"tapFn","kind":9,"href":"#s615","typeKind":17,"type":"(val: T) => void"}],"kind":11,"flags":1,"href":"index--Observable.html#s614","typeKind":8,"type":"Observable"},{"sig":"then<E, R>(resolve: (val: P extends 'emit1' ? T : T | undefined) => R, reject?: (e: E) => R): Promise<R>","name":"then","parameters":[{"sig":"resolve: (val: P extends 'emit1' ? T : T | undefined) => R","name":"resolve","kind":9,"href":"#s161","typeKind":17,"type":"(val: P extends 'emit1' ? T : T | undefined) => R"},{"sig":"reject?: (e: E) => R","name":"reject","kind":9,"flags":524288,"href":"#s164","typeKind":17,"type":"(e: E) => R"}],"kind":11,"flags":1,"docs":{"content":[{"value":"The `then` method allows an Observable to act like a Promise.\nIt converts the Observable's emissions into a Promise that resolves on completion."}]},"href":"index--Observable.html#s158","typeKind":4,"type":"Promise"}]},{"sig":"Observable<T>","name":"Observable","kind":4,"flags":131073,"href":"index--Observable.html","children":[{"sig":"catchError<T2 extends T | never>(selector: (err: unknown, source: Observable<T>) => Observable<T2> | void): Observable<T>","name":"catchError","parameters":[{"sig":"selector: (err: unknown, source: Observable<T>) => Observable<T2> | void","name":"selector","kind":9,"href":"#s559","typeKind":17,"type":"(err: unknown, source: Observable<T>) => Observable<T2> | void"}],"kind":11,"flags":1,"href":"index--Observable.html#s557","typeKind":8,"type":"Observable"},{"sig":"debounceTime(time?: number, timer?: (delay: number) => Observable<void>): Observable<T>","name":"debounceTime","parameters":[{"sig":"time?: number","name":"time","kind":9,"flags":524288,"href":"#s564","typeKind":32,"type":"number"},{"sig":"timer?: (delay: number) => Observable<void>","name":"timer","kind":9,"flags":524288,"href":"#s565","typeKind":17,"type":"(delay: number) => Observable<void>"}],"kind":11,"flags":1,"href":"index--Observable.html#s563","typeKind":8,"type":"Observable"},{"sig":"distinctUntilChanged(): Observable<T>","name":"distinctUntilChanged","kind":11,"flags":1,"href":"index--Observable.html#s568","typeKind":8,"type":"Observable"},{"sig":"exhaustMap<T2>(project: (value: T) => Observable<T2>): Observable<T2>","name":"exhaustMap","parameters":[{"sig":"project: (value: T) => Observable<T2>","name":"project","kind":9,"href":"#s571","typeKind":17,"type":"(value: T) => Observable<T2>"}],"kind":11,"flags":1,"href":"index--Observable.html#s569","typeKind":8,"type":"Observable"},{"sig":"filter<T2>(fn: (val: T) => boolean): Observable<T2>","name":"filter","parameters":[{"sig":"fn: (val: T) => boolean","name":"fn","kind":9,"href":"#s576","typeKind":17,"type":"(val: T) => boolean"}],"kind":11,"flags":1,"href":"index--Observable.html#s574","typeKind":8,"type":"Observable"},{"sig":"finalize(fn: () => void): Observable<T>","name":"finalize","parameters":[{"sig":"fn: () => void","name":"fn","kind":9,"href":"#s580","typeKind":17,"type":"() => void"}],"kind":11,"flags":1,"href":"index--Observable.html#s579","typeKind":8,"type":"Observable"},{"sig":"first(): Observable<T>","name":"first","kind":11,"flags":1,"href":"index--Observable.html#s582","typeKind":8,"type":"Observable"},{"sig":"ignoreElements(): Observable<never>","name":"ignoreElements","kind":11,"flags":1,"href":"index--Observable.html#s618","typeKind":8,"type":"Observable"},{"sig":"map<T2>(mapFn: (val: T) => T2): Observable<T2>","name":"map","parameters":[{"sig":"mapFn: (val: T) => T2","name":"mapFn","kind":9,"href":"#s585","typeKind":17,"type":"(val: T) => T2"}],"kind":11,"flags":1,"href":"index--Observable.html#s583","typeKind":8,"type":"Observable"},{"sig":"mergeMap<T2>(project: (val: T) => Observable<T2>): Observable<T2>","name":"mergeMap","parameters":[{"sig":"project: (val: T) => Observable<T2>","name":"project","kind":9,"href":"#s590","typeKind":17,"type":"(val: T) => Observable<T2>"}],"kind":11,"flags":1,"href":"index--Observable.html#s588","typeKind":8,"type":"Observable"},{"sig":"publishLast(): Observable<T>","name":"publishLast","kind":11,"flags":1,"href":"index--Observable.html#s593","typeKind":8,"type":"Observable"},{"sig":"reduce<T2>(reduceFn: (acc: T2, val: T, i: number) => T2, seed: T2): Observable<T2>","name":"reduce","parameters":[{"sig":"reduceFn: (acc: T2, val: T, i: number) => T2","name":"reduceFn","kind":9,"href":"#s596","typeKind":17,"type":"(acc: T2, val: T, i: number) => T2"},{"sig":"seed: T2","name":"seed","kind":9,"href":"#s601","typeKind":3,"type":"T2"}],"kind":11,"flags":1,"href":"index--Observable.html#s594","typeKind":8,"type":"Observable"},{"sig":"share(): Observable<T>","name":"share","kind":11,"flags":1,"href":"index--Observable.html#s602","typeKind":8,"type":"Observable"},{"sig":"switchMap<T2>(project: (val: T) => Observable<T2>): Observable<T2>","name":"switchMap","parameters":[{"sig":"project: (val: T) => Observable<T2>","name":"project","kind":9,"href":"#s605","typeKind":17,"type":"(val: T) => Observable<T2>"}],"kind":11,"flags":1,"href":"index--Observable.html#s603","typeKind":8,"type":"Observable"},{"sig":"take(howMany: number): Observable<T>","name":"take","parameters":[{"sig":"howMany: number","name":"howMany","kind":9,"href":"#s609","typeKind":32,"type":"number"}],"kind":11,"flags":1,"href":"index--Observable.html#s608","typeKind":8,"type":"Observable"},{"sig":"takeWhile(fn: (val: T) => boolean): Observable<T>","name":"takeWhile","parameters":[{"sig":"fn: (val: T) => boolean","name":"fn","kind":9,"href":"#s611","typeKind":17,"type":"(val: T) => boolean"}],"kind":11,"flags":1,"href":"index--Observable.html#s610","typeKind":8,"type":"Observable"},{"sig":"tap(tapFn: (val: T) => void): Observable<T>","name":"tap","parameters":[{"sig":"tapFn: (val: T) => void","name":"tapFn","kind":9,"href":"#s615","typeKind":17,"type":"(val: T) => void"}],"kind":11,"flags":1,"href":"index--Observable.html#s614","typeKind":8,"type":"Observable"}]},{"sig":"ObservableError = unknown","name":"ObservableError","kind":2,"href":"#s17","typeKind":43,"type":"unknown"},{"sig":"ObservableT<T> = T extends Observable<infer U extends U> ? U : never","name":"ObservableT","kind":2,"href":"#s52","typeKind":18,"type":"T extends Observable<infer U extends U> ? U : never","resolvedType":"T extends Observable<infer U extends U, &quot;none&quot;> ? U : never"},{"sig":"Observer<T>","name":"Observer","kind":4,"flags":1,"href":"index--Observer.html","children":[{"sig":"complete?: CompleteFunction","name":"complete","kind":10,"flags":524289,"docs":{"content":[{"value":"The `complete` property within the `Observer` interface is an optional method\nthat signals the successful completion of the Observable's emission sequence.\n\n- If provided, it will be invoked when the Observable has finished emitting all values without an error.\n- This is particularly useful for cleaning up resources or triggering follow-up logic."}]},"href":"index--Observer.html#s77","typeKind":2,"type":"CompleteFunction"},{"sig":"error?: ErrorFunction","name":"error","kind":10,"flags":524289,"docs":{"content":[{"value":"The `error` property within the `Observer` interface is an optional method\nthat handles errors from the Observable's execution.\n\n- Providing an error handler here allows Observers to manage exceptions locally\n  without propagating them further up the execution chain."}]},"href":"index--Observer.html#s76","typeKind":2,"type":"ErrorFunction"},{"sig":"next?: NextFunction<T>","name":"next","kind":10,"flags":524289,"docs":{"content":[{"value":"The `next` property allows the observer to react to each value emitted by the Observable."}]},"href":"index--Observer.html#s75","typeKind":2,"type":"NextFunction"},{"sig":"signal?: Observable<void>","name":"signal","kind":10,"flags":524289,"docs":{"content":[{"value":"The `signal` property is an optional Observable that provides a mechanism for external cancellation."}]},"href":"index--Observer.html#s78","typeKind":8,"type":"Observable"}]},{"sig":"Operator<T, T2> = (observable: Observable<T>) => Observable<T2>","name":"Operator","kind":2,"flags":1,"href":"index--html#s66","typeKind":17,"type":{"sig":"(observable: Observable<T>) => Observable<T2>","name":"","parameters":[{"sig":"observable: Observable<T>","name":"observable","kind":9,"href":"#s70","typeKind":8,"type":"Observable<T>"}],"kind":17,"href":"#s69","typeKind":8,"type":"Observable"},"resolvedType":{"sig":"(observable: Observable<T, &quot;none&quot;>) => Observable<T2, &quot;none&quot;>","name":"","parameters":[{"sig":"observable: Observable<T, &quot;none&quot;>","name":"observable","kind":9,"href":"#s72","typeKind":6,"type":"Observable<T, &quot;none&quot;>"}],"kind":17,"href":"#s71","typeKind":6,"type":"Observable<T2, &quot;none&quot;>"}},{"sig":"OrderedSubject<T> extends Subject<T>","name":"OrderedSubject","kind":8,"flags":1,"docs":{"content":[{"value":"A subject that guarantees all subscribers receive the same values in the order they were emitted."}]},"href":"index--OrderedSubject.html","typeKind":33,"type":"extends Subject<T>","children":[{"sig":"emitting: boolean = false","name":"emitting","kind":10,"flags":9,"href":"index--OrderedSubject.html#s248","typeKind":32,"type":"boolean"},{"sig":"next(a: T): void","name":"next","parameters":[{"sig":"a: T","name":"a","kind":9,"href":"#s250","typeKind":3,"type":"T"}],"kind":11,"flags":1,"href":"index--OrderedSubject.html#s249","typeKind":32,"type":"void"},{"sig":"queue: T[] = []","name":"queue","kind":10,"flags":9,"href":"index--OrderedSubject.html#s247","typeKind":15,"type":"T[]"}]},{"sig":"PickObservable<T> = { [P in keyof T]: T[P] extends Observable<unknown> ? ObservableT<T[P]> : never }","name":"PickObservable","kind":2,"href":"#s56","typeKind":40,"type":"{ [P in keyof T]: T[P] extends Observable<unknown> ? ObservableT<T[P]> : never }","resolvedType":"{ [P in keyof T]: T[P] extends Observable<unknown, &quot;none&quot;> ? ObservableT<T[P]> : never }"},{"sig":"Reference<T> extends Subject<T>","name":"Reference","kind":8,"flags":1,"docs":{"content":[{"value":"A Reference is a behavior subject that does not require an initial value."}]},"href":"index--Reference.html","typeKind":33,"type":"extends Subject<T>","children":[{"sig":"$value: T | typeof Undefined = Undefined","name":"$value","kind":10,"flags":17,"href":"index--Reference.html#s276","typeKind":5,"type":{"sig":"","name":"","kind":5,"children":[{"sig":"T: T","name":"T","kind":6,"href":"#s275","typeKind":3,"type":"T"},{"sig":"Undefined","name":"Undefined","kind":27}]}},{"sig":"hasValue(): boolean","name":"hasValue","kind":12,"flags":1,"href":"index--Reference.html#s277","typeKind":32,"type":"boolean"},{"sig":"next(val: T): void","name":"next","parameters":[{"sig":"val: T","name":"val","kind":9,"href":"#s280","typeKind":3,"type":"T"}],"kind":11,"flags":1,"href":"index--Reference.html#s279","typeKind":32,"type":"void"},{"sig":"onSubscribe(subscription: Subscriber<T>): void","name":"onSubscribe","parameters":[{"sig":"subscription: Subscriber<T>","name":"subscription","kind":9,"href":"#s282","typeKind":34,"type":"Subscriber<T>"}],"kind":11,"flags":17,"href":"index--Reference.html#s281","typeKind":32,"type":"void"},{"sig":"value(): T","name":"value","kind":12,"flags":1,"href":"index--Reference.html#s278","typeKind":3,"type":"T"}]},{"sig":"ReplaySubject<T, ErrorT> extends Subject<T, ErrorT>","name":"ReplaySubject","kind":8,"flags":1,"docs":{"content":[{"value":"A variant of Subject that \"replays\" or emits old values to new subscribers.\nIt buffers a set number of values and will emit those values immediately to any\nnew subscribers in addition to emitting new values to existing subscribers."}]},"href":"index--ReplaySubject.html","typeKind":33,"type":"extends Subject<T, ErrorT>","children":[{"sig":"buffer: T[] = []","name":"buffer","kind":10,"flags":9,"href":"index--ReplaySubject.html#s263","typeKind":15,"type":"T[]"},{"sig":"bufferSize: number = Infinity","name":"bufferSize","kind":10,"flags":68,"href":"index--ReplaySubject.html#s267","typeKind":32,"type":"number"},{"sig":"constructor(public bufferSize: number = Infinity): ReplaySubject<T, ErrorT>","name":"constructor","parameters":[{"sig":"bufferSize: number = Infinity","name":"bufferSize","kind":10,"flags":68,"href":"index--ReplaySubject.html#s267","typeKind":32,"type":"number"}],"kind":14,"href":"index--ReplaySubject.html#s266","typeKind":8,"type":"ReplaySubject"},{"sig":"error(val: ErrorT): void","name":"error","parameters":[{"sig":"val: ErrorT","name":"val","kind":9,"href":"#s269","typeKind":3,"type":"ErrorT"}],"kind":11,"flags":1,"href":"index--ReplaySubject.html#s268","typeKind":32,"type":"void"},{"sig":"hasError: boolean = false","name":"hasError","kind":10,"flags":9,"href":"index--ReplaySubject.html#s264","typeKind":32,"type":"boolean"},{"sig":"lastError?: ErrorT","name":"lastError","kind":10,"flags":524297,"href":"index--ReplaySubject.html#s265","typeKind":3,"type":"ErrorT"},{"sig":"next(val: T): void","name":"next","parameters":[{"sig":"val: T","name":"val","kind":9,"href":"#s271","typeKind":3,"type":"T"}],"kind":11,"flags":1,"href":"index--ReplaySubject.html#s270","typeKind":32,"type":"void"},{"sig":"onSubscribe(subscriber: Subscriber<T>): void","name":"onSubscribe","parameters":[{"sig":"subscriber: Subscriber<T>","name":"subscriber","kind":9,"href":"#s273","typeKind":34,"type":"Subscriber<T>"}],"kind":11,"flags":17,"href":"index--ReplaySubject.html#s272","typeKind":32,"type":"void"}]},{"sig":"Subject<T, ErrorT> extends Observable<T>","name":"Subject","kind":8,"flags":1,"docs":{"content":[{"value":"A Subject is an Observable that allows values to be\nmulticasted to many Observers."}]},"href":"index--Subject.html","typeKind":33,"type":"extends Observable<T>","children":[{"sig":"closed: boolean = false","name":"closed","kind":10,"flags":1,"href":"index--Subject.html#s209","typeKind":32,"type":"boolean"},{"sig":"complete(): void","name":"complete","kind":11,"flags":1,"href":"index--Subject.html#s227","typeKind":32,"type":"void"},{"sig":"constructor(): Subject<T, ErrorT>","name":"constructor","kind":14,"href":"index--Subject.html#s222","typeKind":8,"type":"Subject"},{"sig":"error(e: ErrorT): void","name":"error","parameters":[{"sig":"e: ErrorT","name":"e","kind":9,"href":"#s226","typeKind":3,"type":"ErrorT"}],"kind":11,"flags":1,"href":"index--Subject.html#s225","typeKind":32,"type":"void"},{"sig":"next(a: T): void","name":"next","parameters":[{"sig":"a: T","name":"a","kind":9,"href":"#s224","typeKind":3,"type":"T"}],"kind":11,"flags":1,"docs":{"content":[{"value":"Emits a new value to all active subscribers if the Subject is not in a closed state.\n- Iterates over the list of current subscribers and calls their `next` method with the provided value.\n- Inactive or closed subscribers are skipped.\n- This ensures only active subscribers receive new emissions."}]},"href":"index--Subject.html#s223","typeKind":32,"type":"void"},{"sig":"observers: Set<{ error: (e: unknown) => void; unsubscribe: () => void; closed: boolean; signal: CancelSignal; next(val: T): void; complete(): void }> = new Set<Subscriber<T>>()","name":"observers","kind":10,"flags":17,"href":"index--Subject.html#s211","typeKind":4,"type":"Set"},{"sig":"onSubscribe(subscriber: Subscriber<T>): void","name":"onSubscribe","parameters":[{"sig":"subscriber: Subscriber<T>","name":"subscriber","kind":9,"href":"#s229","typeKind":34,"type":"Subscriber<T>"}],"kind":11,"flags":17,"href":"index--Subject.html#s228","typeKind":32,"type":"void"},{"sig":"signal: CancelSignal = cancel()","name":"signal","kind":10,"flags":1,"href":"index--Subject.html#s210","typeKind":8,"type":"CancelSignal"}]},{"sig":"Subscribable<T>","name":"Subscribable","kind":4,"flags":1,"href":"index--Subscribable.html","children":[{"sig":"subscribe(observer: Observer<T>): Subscription","name":"subscribe","parameters":[{"sig":"observer: Observer<T>","name":"observer","kind":9,"href":"#s82","typeKind":4,"type":"Observer<T>"}],"kind":11,"flags":1,"href":"index--Subscribable.html#s81","typeKind":4,"type":"Subscription"}]},{"sig":"SubscribeFunction<T> = (subscription: Subscriber<T>) => void","name":"SubscribeFunction","kind":2,"href":"#s32","typeKind":17,"type":{"sig":"(subscription: Subscriber<T>) => void","name":"","parameters":[{"sig":"subscription: Subscriber<T>","name":"subscription","kind":9,"href":"#s35","typeKind":34,"type":"Subscriber<T>"}],"kind":17,"href":"#s34","typeKind":32,"type":"void"},"resolvedType":{"sig":"(subscription: { error: (e: unknown) => void; unsubscribe: () => void; closed: boolean; signal: CancelSignal; next(val: T): void; complete(): void }) => void","name":"","parameters":[{"sig":"subscription: { error: (e: unknown) => void; unsubscribe: () => void; closed: boolean; signal: CancelSignal; next(val: T): void; complete(): void }","name":"subscription","kind":9,"href":"#s37","typeKind":34,"type":"{ error: (e: unknown) => void; unsubscribe: () => void; closed: boolean; signal: CancelSignal; next(val: T): void; complete(): void }"}],"kind":17,"href":"#s36","typeKind":32,"type":"void"}},{"sig":"Subscriber<T> = ReturnType<typeof Subscriber>","name":"Subscriber","kind":2,"flags":1,"href":"index--html#s85","typeKind":34,"type":{"sig":"","name":"","kind":34},"resolvedType":{"sig":"","name":"","kind":34,"children":[{"sig":"closed: boolean","name":"closed","kind":10,"flags":65,"href":"#s92","typeKind":32,"type":"boolean"},{"sig":"complete(): void","name":"complete","kind":11,"flags":1,"href":"#s96","typeKind":32,"type":"void"},{"sig":"error: (e: unknown) => void","name":"error","kind":10,"flags":1,"href":"#s87","typeKind":17,"type":{"sig":"(e: unknown) => void","name":"","parameters":[{"sig":"e: unknown","name":"e","kind":9,"href":"#s89","typeKind":43,"type":"unknown"}],"kind":17,"href":"#s88","typeKind":32,"type":"void"}},{"sig":"next(val: T): void","name":"next","parameters":[{"sig":"val: T","name":"val","kind":9,"href":"#s95","typeKind":6,"type":"T"}],"kind":11,"flags":1,"href":"#s94","typeKind":32,"type":"void"},{"sig":"signal: CancelSignal","name":"signal","kind":10,"flags":1,"href":"#s93","typeKind":6,"type":"CancelSignal"},{"sig":"unsubscribe: () => void","name":"unsubscribe","kind":10,"flags":1,"href":"#s90","typeKind":17,"type":{"sig":"() => void","name":"","kind":17,"href":"#s91","typeKind":32,"type":"void"}}]}},{"sig":"Subscription","name":"Subscription","kind":4,"flags":1,"href":"index--Subscription.html","children":[{"sig":"unsubscribe(): void","name":"unsubscribe","kind":11,"flags":1,"href":"index--Subscription.html#s98","typeKind":32,"type":"void"}]}]}